var renderer, scene, camera, CONTAINER = document.getElementById("webgl");
var textMesh; // Declare a variable to store the text mesh

function init() {
    setup();
    createCodeText();
    lighting(); // Add lighting
    animate();
}

var angle = 0; // Angle for horizontal rotation
var angleIncrement = 0.005; // Speed of rotation

function animateText() {
    angle += angleIncrement;

    if (textMesh) {
        textMesh.rotation.y = angle; // Rotate 'Code' text around its y-axis
    }
}

function createCodeText() {
    var loader = new THREE.FontLoader();
    loader.load("helvetiker_regular.typeface.json", function (font) {
        var textGeometry = new THREE.TextGeometry('Code', {
            font: font,
            size: 2, // Adjust the font size as needed
            height: 0.5,
            curveSegments: 12,
            bevelEnabled: true, // Create 3D effect
            bevelThickness: 0.05,
            bevelSize: 0.05
        });

        var textMaterial = new THREE.MeshPhongMaterial({
            color: 0xffffff, // Pure white color
            specular: 0xffffff, // Reflective color
            shininess: 50 // Shininess
        });

        textMesh = new THREE.Mesh(textGeometry, textMaterial);

        scene.add(textMesh);
    });
}

function animate() {
    requestAnimationFrame(animate);
    animateText();
    renderer.render(scene, camera);
}

function setup() {
    renderer = new THREE.WebGLRenderer({
        alpha: true
    });
    renderer.setSize(CONTAINER.offsetWidth, CONTAINER.offsetHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    CONTAINER.appendChild(renderer.domElement);
    scene = new THREE.Scene();
    renderer.setClearColor(0x000000, 0);
    camera = new THREE.PerspectiveCamera(20, CONTAINER.offsetWidth / CONTAINER.offsetHeight, 1, 70);
    camera.position.set(0, 0, 20);
    camera.lookAt(0, 0, 0);
    window.addEventListener("resize", function () {
        renderer.setSize(CONTAINER.offsetWidth, CONTAINER.offsetHeight);
        camera.aspect = CONTAINER.offsetWidth / CONTAINER.offsetHeight;
        camera.updateProjectionMatrix();
    });
}

function lighting() {
    var light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(0, 1, 1);
    scene.add(light);

    var ambientLight = new THREE.AmbientLight(0x404040); // Add ambient light
    scene.add(ambientLight);
}

init();
